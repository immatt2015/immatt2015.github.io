<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on My Blog</title><link>https://immatt2015.github.io/post/</link><description>Recent content in Posts on My Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 12 Feb 2021 15:14:30 +0800</lastBuildDate><atom:link href="https://immatt2015.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>NanoPi r4s lede 固件编译</title><link>https://immatt2015.github.io/2021/02/nanopi-r4s-lede-%E5%9B%BA%E4%BB%B6%E7%BC%96%E8%AF%91/</link><pubDate>Fri, 12 Feb 2021 15:14:30 +0800</pubDate><guid>https://immatt2015.github.io/2021/02/nanopi-r4s-lede-%E5%9B%BA%E4%BB%B6%E7%BC%96%E8%AF%91/</guid><description>脚本来自 (github action)[https://github.com/281677160/build-openwrt)
编译的软件会有冲突, (参考)[https://github.com/281677160/openwrt-package]
出现error: ext4_allocate_best_fit_partial: failed to allocate XXX blocks, out of space错误的解决办法： make menuconfig,找到菜单项&amp;quot;Target Images&amp;quot;,&amp;quot;Root filesystem partition size (in MB)&amp;quot;,把值改大即可
脚本内容:
# 除了编译【openwrt】机型外，其他机型都直接打入了常用插件了，不需要自己再拉取插件，除非我的插件包跟源码自带的都没有，你就自己添加吧，说明的《各种命令的简单介绍》有教程。 # 选择编译【openwrt】纯天然不经任何修改的，增加插件可以在diy-1.sh增加，也可在settings.ini里修改成你想要编译的源码跟分支。 # 选择【Lede_phicomm_n1或Project_phicomm_n1】的机型文件夹编译的话，会自动编译出（ N1、微加云、贝壳云、我家云、S9xxx ）固件。 # [Lede_x86_64,Lede_gl_mt300n_v2,Lede_nanopi_r2s,Lede_nanopi_r4s,Lede_newifi_d2,p2w_r619ac_128m,Lede_phicomm_k2p,Lede_phicomm_n1,Lede_redmi_ac2100,Lede_wankeyun,Lede_wndr3800,Lede_wndr4300_v1,Lede_wr703n_v1,Lede_xiaomi_r3pro,Lede_xiaoyu_c5,Lede_Raspberry_Pi4] # [Lienol_phicomm_k2p,Lienol_phicomm_k3,Lienol_x86_64] # [Project_x86_64,Project_nanopi_r2s,Project_nanopi_r4s,Project_newifi_d2,Project_phicomm_k3,Project_phicomm_n1,Project_xiaomi_ac2100,Project_xiaomi_mir3g,Project_xiaoyu_c5] # [openwrt] REPO_URL=&amp;quot;https://github.com/coolsnowwolf/lede&amp;quot; #编译固件源码链接（请勿修改） REPO_BRANCH=&amp;quot;master&amp;quot; #源码链接的分支（请勿修改） CONFIG_FILE=&amp;quot;.config&amp;quot; #配置文件（可SSH远程定制固件插件，也可在本地提取配置粘贴到此文件）(默认4GB内存的,要编译1GB内存的把 .config 修改成 1gb.config 就可以了) WXFB_MESSAGE=&amp;quot;Lede_nanopi_r4s&amp;quot; #微信通知跟发布要用到的名字,比如通知你XX开始编译,发布的时候显示XX固件 DIY_P1_SH=&amp;quot;diy-1.sh&amp;quot; #自定义文件1 DIY_P2_SH=&amp;quot;diy-2.sh&amp;quot; #自定义文件2 matrix_target=&amp;quot;Lede_nanopi_r4s&amp;quot; # 安装编译所需环境 sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc sudo -E apt-get -qq update -y sudo -E apt-get -qq install -y build-essential asciidoc binutils bzip2 gawk gettext git libc6-dev-i386 libncurses5 libtinfo-dev libtinfo5 ncurses-doc libncurses5-dev libz-dev patch python3 python2.</description></item><item><title>nodejs 换源</title><link>https://immatt2015.github.io/2021/02/nodejs-%E6%8D%A2%E6%BA%90/</link><pubDate>Fri, 12 Feb 2021 15:14:30 +0800</pubDate><guid>https://immatt2015.github.io/2021/02/nodejs-%E6%8D%A2%E6%BA%90/</guid><description>nvm 换源：export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node/
npm 换源 或者 ~/.npmrc npm config set registry https://registry.npm.taobao.org</description></item><item><title>openwrt 编译以及在小米/极路由安装</title><link>https://immatt2015.github.io/2021/01/openwrt-%E7%BC%96%E8%AF%91%E4%BB%A5%E5%8F%8A%E5%9C%A8%E5%B0%8F%E7%B1%B3/%E6%9E%81%E8%B7%AF%E7%94%B1%E5%AE%89%E8%A3%85/</link><pubDate>Tue, 12 Jan 2021 15:00:00 +0800</pubDate><guid>https://immatt2015.github.io/2021/01/openwrt-%E7%BC%96%E8%AF%91%E4%BB%A5%E5%8F%8A%E5%9C%A8%E5%B0%8F%E7%B1%B3/%E6%9E%81%E8%B7%AF%E7%94%B1%E5%AE%89%E8%A3%85/</guid><description>遇到的问题:
编译出现 dnsmasq 相关错误 直接在编译选项 base system里 去掉dnsmasq. 参考 upx 文件找不到 which upx; cp upx upx-cul; 参考 部署环境及依赖，可以参考lede的方式
sudo apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync git clone https://github.com/openwrt/openwrt; cd openwrt; .</description></item><item><title>饥荒</title><link>https://immatt2015.github.io/2020/09/%E9%A5%A5%E8%8D%92/</link><pubDate>Fri, 25 Sep 2020 03:09:51 -0500</pubDate><guid>https://immatt2015.github.io/2020/09/%E9%A5%A5%E8%8D%92/</guid><description>饥荒终于存货了 500 day 了。</description></item><item><title>Git</title><link>https://immatt2015.github.io/2020/06/git/</link><pubDate>Sun, 28 Jun 2020 03:09:51 -0500</pubDate><guid>https://immatt2015.github.io/2020/06/git/</guid><description>获取当前 commit 的 hash
git rev-parse --verify HEAD</description></item><item><title>Lua Module</title><link>https://immatt2015.github.io/2020/06/lua-module/</link><pubDate>Tue, 02 Jun 2020 22:56:50 +0700</pubDate><guid>https://immatt2015.github.io/2020/06/lua-module/</guid><description>local module = {}; module.xxx = xxx; functionn module.xxx () -- todo end return module; Lua 模块被 require 之后， 只会运行一次并进行缓存</description></item><item><title>Lua FFI 调用 golang</title><link>https://immatt2015.github.io/2020/05/lua-ffi-%E8%B0%83%E7%94%A8-golang/</link><pubDate>Thu, 28 May 2020 22:57:31 +0700</pubDate><guid>https://immatt2015.github.io/2020/05/lua-ffi-%E8%B0%83%E7%94%A8-golang/</guid><description>安装 LuaRocks, 参考openresty 官方 wget http://luarocks.org/releases/luarocks-2.0.13.tar.gz tar -xzvf luarocks-2.0.13.tar.gz cd luarocks-2.0.13/ ./configure --prefix=/usr/local/openresty/luajit \ --with-lua=/usr/local/openresty/luajit/ \ --lua-suffix=jit \ --with-lua-include=/usr/local/openresty/luajit/include/luajit-2.1 make sudo make install 安装 lua2go sudo /usr/local/openresty/luajit/luarocks install --server=https://luarocks.org/dev lua2go 通过 lua2go 调用 golang dll local lua2go = require(&amp;#39;lua2go&amp;#39;) local xxx = lua2go.Load(&amp;#39;./xxx.so&amp;#39;) lua2go.Externs([ extern char* captcha(xxx) ]) 试用这个ffi 模块，可能多次调用 lua2go.Externs 函数,导致内存泄漏；最好包装成lua module
安装 LuaRocks, 参考openresty 官方 wget http://luarocks.org/releases/luarocks-2.0.13.tar.gz tar -xzvf luarocks-2.0.13.tar.gz cd luarocks-2.0.13/ ./configure --prefix=/usr/local/openresty/luajit \ --with-lua=/usr/local/openresty/luajit/ \ --lua-suffix=jit \ --with-lua-include=/usr/local/openresty/luajit/include/luajit-2.</description></item><item><title>OpenVPN 部署以及在 openwrt 上搭透明代理</title><link>https://immatt2015.github.io/2020/05/openvpn-%E9%83%A8%E7%BD%B2%E4%BB%A5%E5%8F%8A%E5%9C%A8-openwrt-%E4%B8%8A%E6%90%AD%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86/</link><pubDate>Thu, 28 May 2020 22:42:11 +0700</pubDate><guid>https://immatt2015.github.io/2020/05/openvpn-%E9%83%A8%E7%BD%B2%E4%BB%A5%E5%8F%8A%E5%9C%A8-openwrt-%E4%B8%8A%E6%90%AD%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86/</guid><description>本文主要介绍的是 openvpn 部署过程 以及在 openwrt 搞透明全局代理
vps 系统类型： Centos7
vps 主要执行：
安装 openvpn 并设置 打开ipv4数据包转发 防火墙允许包转发 添加用户 服务器 添加EPEL源, 并执行更新
yum install epel-release -y &amp;amp;&amp;amp; yum update -y &amp;amp;&amp;amp; yum upgrade -y 安装openvpn 以及 工具
yum -y install openvpn easy-rsa 生成密钥 复制配置文件 cd /usr/share/easy-rsa/3 cp /usr/share/doc/easy-rsa-${ easy-rsa 版本号 }/vars.example vars
修改 var 项目
#set_var EASYRSA_REQ_COUNTRY &amp;quot;US&amp;quot; #set_var EASYRSA_REQ_PROVINCE &amp;quot;California&amp;quot; #set_var EASYRSA_REQ_CITY &amp;quot;San Francisco&amp;quot; #set_var EASYRSA_REQ_ORG &amp;quot;Copyleft Certificate Co&amp;quot; #set_var EASYRSA_REQ_EMAIL &amp;quot;me@example.</description></item><item><title>Openresty GeoIp 使用</title><link>https://immatt2015.github.io/2020/05/openresty-geoip-%E4%BD%BF%E7%94%A8/</link><pubDate>Thu, 28 May 2020 13:41:57 +0700</pubDate><guid>https://immatt2015.github.io/2020/05/openresty-geoip-%E4%BD%BF%E7%94%A8/</guid><description>安装过程:
到 maxmind 站点注册个账号 vps 安装 yum install libmaxminddb libmaxminddb-devel perl-Digest-MD5 安装 openresty 第三方包 opm get anjia0532/lua-resty-maxminddb openresty 配置文件, 进行初始化 init_by_lua_block { local geo = require 'resty.maxminddb' if not geo.initted() then geo.init(&amp;quot;$GeoLite2.mmdb 路径&amp;quot;) end } 可以在其他的 lua 执行节点使用 local geo = require 'resty.maxminddb' local res, err = geo.lookup($ip) 免费库精准度一般； 测试发现很大的误差·······</description></item><item><title>为 Nginx/Openresty 添加 nginx Njs</title><link>https://immatt2015.github.io/2020/05/%E4%B8%BA-nginx/openresty-%E6%B7%BB%E5%8A%A0-nginx-njs/</link><pubDate>Wed, 27 May 2020 13:41:12 +0700</pubDate><guid>https://immatt2015.github.io/2020/05/%E4%B8%BA-nginx/openresty-%E6%B7%BB%E5%8A%A0-nginx-njs/</guid><description>njs 是可以 javascrip 编写 nginx 处理逻辑。
njs 可以通过编译成 dynamic module 添加到 nginx/openresty ；
编译的过程:
到 http://hg.nginx.org/njs 下载 njs 代码; 进入 nginx/openrety 的源码目录 ./configurate --add-dynamical-module=/xxxx/njs_root_path/nginx ，参数为 njs 源码目录下的 nginx 目录的绝对路径 在 nginx/openresty 源码根路径下执行 make 第4步执行完后， 执行 make install 在 nginx.conf 下配置 njs 动态模块; nginx.conf worker_processes 1; load_module /usr/local/openresty/nginx/modules/ngx_http_js_module.so; # openrety 默认路径 events { worker_connections 1024; } http { js_include http.js; server { listen 80; error_log /usr/local/openresty/nginx/logs/e.log; location / { js_content foo; } } } /usr/local/openresty/nginx/conf/http.</description></item></channel></rss>