<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>nginx on My Blog</title><link>https://immatt2015.github.io/tags/nginx/</link><description>Recent content in nginx on My Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 13 Jul 2021 10:41:57 +0700</lastBuildDate><atom:link href="https://immatt2015.github.io/tags/nginx/index.xml" rel="self" type="application/rss+xml"/><item><title>nginx https</title><link>https://immatt2015.github.io/2021/07/nginx-https/</link><pubDate>Tue, 13 Jul 2021 10:41:57 +0700</pubDate><guid>https://immatt2015.github.io/2021/07/nginx-https/</guid><description>安装过程: 环境: centos7, openresty 使用certbot 生成证书 yum install epel-release -y &amp;amp;&amp;amp; yum update -y yum install -y openresty certbot gettext 设置 openresty/nginx 80 端口 server { listen 80; server_name _; location ^~ /.well-known/acme-challenge/ { index index.html index.htm; root html; } location = /.well-known/acme-challenge/ { return 404; } } 重启 nginx/openresty, 执行 certbot certonly -m ${自己的邮箱} --webroot -d ${域名} -w ${ngx www 路径目录} --agree-tos &amp;gt; /tmp/cert.log openssl dhparam 2048 -out dhparam.</description></item><item><title>Lua Module</title><link>https://immatt2015.github.io/2020/06/lua-module/</link><pubDate>Tue, 02 Jun 2020 22:56:50 +0700</pubDate><guid>https://immatt2015.github.io/2020/06/lua-module/</guid><description>local module = {}; module.xxx = xxx; functionn module.xxx () -- todo end return module; Lua 模块被 require 之后， 只会运行一次并进行缓存</description></item><item><title>Lua FFI 调用 golang</title><link>https://immatt2015.github.io/2020/05/lua-ffi-%E8%B0%83%E7%94%A8-golang/</link><pubDate>Thu, 28 May 2020 22:57:31 +0700</pubDate><guid>https://immatt2015.github.io/2020/05/lua-ffi-%E8%B0%83%E7%94%A8-golang/</guid><description>安装 LuaRocks, 参考openresty 官方 wget http://luarocks.org/releases/luarocks-2.0.13.tar.gz tar -xzvf luarocks-2.0.13.tar.gz cd luarocks-2.0.13/ ./configure --prefix=/usr/local/openresty/luajit \ --with-lua=/usr/local/openresty/luajit/ \ --lua-suffix=jit \ --with-lua-include=/usr/local/openresty/luajit/include/luajit-2.1 make sudo make install 安装 lua2go sudo /usr/local/openresty/luajit/luarocks install --server=https://luarocks.org/dev lua2go 通过 lua2go 调用 golang dll local lua2go = require(&amp;#39;lua2go&amp;#39;) local xxx = lua2go.Load(&amp;#39;./xxx.so&amp;#39;) lua2go.Externs([ extern char* captcha(xxx) ]) 试用这个ffi 模块，可能多次调用 lua2go.Externs 函数,导致内存泄漏；最好包装成lua module
安装 LuaRocks, 参考openresty 官方 wget http://luarocks.org/releases/luarocks-2.0.13.tar.gz tar -xzvf luarocks-2.0.13.tar.gz cd luarocks-2.0.13/ ./configure --prefix=/usr/local/openresty/luajit \ --with-lua=/usr/local/openresty/luajit/ \ --lua-suffix=jit \ --with-lua-include=/usr/local/openresty/luajit/include/luajit-2.</description></item><item><title>Openresty GeoIp 使用</title><link>https://immatt2015.github.io/2020/05/openresty-geoip-%E4%BD%BF%E7%94%A8/</link><pubDate>Thu, 28 May 2020 13:41:57 +0700</pubDate><guid>https://immatt2015.github.io/2020/05/openresty-geoip-%E4%BD%BF%E7%94%A8/</guid><description>安装过程:
到 maxmind 站点注册个账号 vps 安装 yum install libmaxminddb libmaxminddb-devel perl-Digest-MD5 安装 openresty 第三方包 opm get anjia0532/lua-resty-maxminddb openresty 配置文件, 进行初始化 init_by_lua_block { local geo = require 'resty.maxminddb' if not geo.initted() then geo.init(&amp;quot;$GeoLite2.mmdb 路径&amp;quot;) end } 可以在其他的 lua 执行节点使用 local geo = require 'resty.maxminddb' local res, err = geo.lookup($ip) 免费库精准度一般； 测试发现很大的误差·······</description></item><item><title>为 Nginx/Openresty 添加 nginx Njs</title><link>https://immatt2015.github.io/2020/05/%E4%B8%BA-nginx/openresty-%E6%B7%BB%E5%8A%A0-nginx-njs/</link><pubDate>Wed, 27 May 2020 13:41:12 +0700</pubDate><guid>https://immatt2015.github.io/2020/05/%E4%B8%BA-nginx/openresty-%E6%B7%BB%E5%8A%A0-nginx-njs/</guid><description>njs 是可以 javascrip 编写 nginx 处理逻辑。
njs 可以通过编译成 dynamic module 添加到 nginx/openresty ；
编译的过程:
到 http://hg.nginx.org/njs 下载 njs 代码; 进入 nginx/openrety 的源码目录 ./configurate --add-dynamical-module=/xxxx/njs_root_path/nginx ，参数为 njs 源码目录下的 nginx 目录的绝对路径 在 nginx/openresty 源码根路径下执行 make 第4步执行完后， 执行 make install 在 nginx.conf 下配置 njs 动态模块; nginx.conf worker_processes 1; load_module /usr/local/openresty/nginx/modules/ngx_http_js_module.so; # openrety 默认路径 events { worker_connections 1024; } http { js_include http.js; server { listen 80; error_log /usr/local/openresty/nginx/logs/e.log; location / { js_content foo; } } } /usr/local/openresty/nginx/conf/http.</description></item></channel></rss>