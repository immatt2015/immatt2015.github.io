<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>lua on My Blog</title><link>https://immatt2015.github.io/tags/lua/</link><description>Recent content in lua on My Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© 2019. Theme by &lt;a href="https://github.com/MeiK2333/github-style">&lt;span>github-style&lt;/span>&lt;/a></copyright><lastBuildDate>Thu, 28 May 2020 22:57:31 +0700</lastBuildDate><atom:link href="https://immatt2015.github.io/tags/lua/index.xml" rel="self" type="application/rss+xml"/><item><title>Lua FFI 调用 golang</title><link>https://immatt2015.github.io/posts/nginx/lua-ffi/</link><pubDate>Thu, 28 May 2020 22:57:31 +0700</pubDate><guid>https://immatt2015.github.io/posts/nginx/lua-ffi/</guid><description>安装 LuaRocks, 参考openresty 官方 wget http://luarocks.org/releases/luarocks-2.0.13.tar.gz tar -xzvf luarocks-2.0.13.tar.gz cd luarocks-2.0.13/ ./configure --prefix=/usr/local/openresty/luajit \ --with-lua=/usr/local/openresty/luajit/ \ --lua-suffix=jit \ --with-lua-include=/usr/local/openresty/luajit/include/luajit-2.1 make sudo make install 安装 lua2go sudo /usr/local/openresty/luajit/luarocks install --server=https://luarocks.org/dev lua2go 通过 lua2go 调用 golang dll local lua2go = require(&amp;#39;lua2go&amp;#39;) local xxx = lua2go.Load(&amp;#39;./xxx.so&amp;#39;) lua2go.Externs([ extern char* captcha(xxx) ]) 试用这个ffi 模块，可能多次调用 lua2go.Externs 函数,导致内存泄漏；最好包装成lua module
安装 LuaRocks, 参考openresty 官方 wget http://luarocks.org/releases/luarocks-2.0.13.tar.gz tar -xzvf luarocks-2.0.13.tar.gz cd luarocks-2.0.13/ ./configure --prefix=/usr/local/openresty/luajit \ --with-lua=/usr/local/openresty/luajit/ \ --lua-suffix=jit \ --with-lua-include=/usr/local/openresty/luajit/include/luajit-2.</description></item><item><title>Lua Module</title><link>https://immatt2015.github.io/posts/nginx/lua-module/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://immatt2015.github.io/posts/nginx/lua-module/</guid><description>local module = {}; module.xxx = xxx; functionn module.xxx () -- todo end return module; Lua 模块被 require 之后， 只会运行一次并进行缓存</description></item></channel></rss>